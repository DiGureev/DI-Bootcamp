# Exercise 1: Counting Frequencies
# Problem Description
# Create a function that counts the frequency of each unique word in a given string and returns a dictionary. 
#The keys will be the unique words and the values will be the counts of those words. The function should 
#have a time complexity of (O(n)).

# Example

# Input: "apple orange apple banana orange apple"
# Output: {'apple': 3, 'orange': 2, 'banana': 1}

# def word_frequency(input_str):
#     my_dict = {}
#     work_string = input_str.split(' ')

#     for item in work_string:
#         if item in my_dict:
#             my_dict[item] +=1
#         else:
#             my_dict[item] = 1

#     return my_dict

# input_str = "apple orange apple banana orange apple"
# result = word_frequency(input_str)
# print(result)


# Exercise 2: Longest Substring Without Repeating Characters
# Problem Description
# You are given a string s. Your task is to find the length of the longest substring without repeating characters.
# A substring is a contiguous sequence of characters within a string.
# Write a function to accomplish this task with an efficient time complexity.

# Example

# Input: s = "abcabcbb"
# Output: 3
# Explanation: The answer is "abc", with the length of 3.

# Code Skeleton

#ANSWER

def longest_unique_substring(s):
    check_str = ''

    check_list = []

    for letter in s:
        if letter not in check_str:
            check_str += letter
        else:
            check_list.append(check_str)
            check_str = ''
            check_str += letter

    biggest_len = 0

    for item in check_list:
        if len(item) > biggest_len:
            biggest_len = len(item)

    return biggest_len
        

# s = "abcabcbb"
# result = longest_unique_substring(s)
# print(result)